#include<iostream>
#include<memory>
using namespace std;
int size1;
class Matrix
{
	int size;
	shared_ptr<shared_ptr<int[]>[]> val;
public:
	Matrix() //default constructor
	{
		cout << "Dimensiunea matricii este: ";
		cin >> size;
		if (size)
			val=make_unique<shared_ptr<int[]>[]>(size);
		else
			val=nullptr;

		for (int i = 0; i < size; i++)
		{
			val[i] = shared_ptr<int[]>(new int[size]);
			for (int j = 0; j < size; j++)
			{
				int k;
				cin >> k;
				val[i][j] = k;
			}
		}
	}
	Matrix(int size1) :size{ size1 }, val{make_unique<shared_ptr<int[]>[]>(size) }
	{
		for (int i = 0; i < size; i++)
		{
			val[i] = shared_ptr<int[]>(new int[size]);
			for (int j = 0; j < size; j++)
			{
				int k;
				cin >> k;
				val[i][j] = k;
			}
		}
	}

	Matrix(const Matrix& mat): size(mat.size), val(size ? make_unique<shared_ptr<int[]>[]>(size) : nullptr) //copy constructor
	{

		size = mat.size;
		for (int i = 0; i < size; i++)
		{ 
			val[i] = shared_ptr<int[]>(new int[size]);
			for (int j = 0; j < size; j++)
			
				val[i][j] = mat.val[i][j];
		}
	}
	
	Matrix& operator=(const Matrix& mat)
	{

		if (&mat != this)
		{
			for (int i = 0; i < size; i++)
			{
				val[i] = shared_ptr<int[]>(new int[size]);
				for (int j = 0; j < size; j++)
					val[i][j] = mat.val[i][j];
			}
		}
		return *this;
	}
	Matrix operator+(const Matrix& mat)
	{
		for (int i = 0; i < size; i++)
		{			
			for (int j = 0; j < size; j++)
			{
				val[i][j] = val[i][j] + mat.val[i][j];
		
			}
		}
		return *this;
	}

	~Matrix()
	{
		cout << "Destoryed Matrix" << endl;
	}

	void afisare() {
		for (int i = 0; i < size; i++)
		{
			for (int j = 0; j < size; j++)
				cout << val[i][j]<<" ";
			cout << endl;
		}
		cout << endl;
	}
};


int main()
{
	
	Matrix a;
	Matrix b;
	Matrix c(a);

	Matrix d = a;

	Matrix e = a + b;
	a.afisare();
	b.afisare();
	c.afisare();
	d.afisare();
	e.afisare();

	return 0;
}

#include <iostream>

using namespace std;

class AbstractProductA {
public:
	virtual ~AbstractProductA() {};
	virtual string functionA() = 0;
};

class ConcreteProductA1 : public AbstractProductA {
public:
	string functionA() {
		return "The result of the product A1.";
	}
};

class ConcreteProductA2 : public AbstractProductA {
public:
	string functionA()  {
		return "The restul of the product A2.";
	}
};

class AbstractProductB {
public:
	virtual ~AbstractProductB() {};
	virtual string functionB() = 0;
	virtual string AnotherFunctionB( AbstractProductA& var) = 0;
};

class ConcreteProductB1 : public AbstractProductB {
public:
	string functionB()  {
		return "The result of the product B1.";
	}

	string AnotherFunctionB( AbstractProductA& var)  {
		 string result = var.functionA();
		return "The result of the B1 collaborating with ( " + result + " )";
	}
};

class ConcreteProductB2 : public AbstractProductB {
public:
	string functionB()  {
		return "The restul of the product B2.";
	}
	string AnotherFunctionB(AbstractProductA& var) 
	{
		string result = var.functionA();
		return "The result of the B2 collaborating with ( " + result + " )";
	}
};

class AbstractFactory {
public:
	virtual AbstractProductA* createA() = 0;
	virtual AbstractProductB* createB() = 0;
};

class ConcreteFactory1 : public AbstractFactory {
public:
	AbstractProductA* createA()  {
		return new ConcreteProductA1();
	}
	AbstractProductB* createB()  {
		return new ConcreteProductB1();
	}
};

class ConcreteFactory2 : public AbstractFactory {
public:
	AbstractProductA* createA() {
		return new ConcreteProductA2();
	}
	AbstractProductB* createB() {
		return new ConcreteProductB2();
	}
};

void Client(AbstractFactory& factory) {
	AbstractProductA* product_a = factory.createA();
	AbstractProductB* product_b = factory.createB();
	cout << product_a->functionA() << endl;
	cout << product_b->AnotherFunctionB(*product_a) << endl;
	delete product_a;
	delete product_b;
}
int main()
{
	cout << "Testing client code with the first factory type" << endl;
	ConcreteFactory1* f1 = new ConcreteFactory1();
	Client(*f1);
	delete f1;
	cout << endl;
	cout<<"Testing client code with the second factory type" << endl;
	ConcreteFactory2* f2 = new ConcreteFactory2();
	Client(*f2);
	delete f2;
	return 0;
}
